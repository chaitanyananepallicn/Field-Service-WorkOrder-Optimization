public class CompletionMail {
    @future
    public static void sendEmailInFuture(List<String> emailAddresses, List<String> emailSubjects, List<String> emailBodies) {
        List<messaging.SingleEmailMessage> emails = new List<messaging.SingleEmailMessage>();

        for (Integer i = 0; i < emailAddresses.size(); i++) {
            messaging.SingleEmailMessage mail = new messaging.SingleEmailMessage();
            mail.setToAddresses(new List<String>{emailAddresses[i]});
            mail.setSubject(emailSubjects[i]);
            mail.setHTMLbody(emailBodies[i]);
            emails.add(mail);
        }

        Messaging.sendEmail(emails);
    }

    public static void sendEmailMsg(List<WorkOrder__c> newWorkOrders, List<WorkOrder__c> oldWorkOrders) {
        List<String> emailAddresses = new List<String>();
        List<String> emailSubjects = new List<String>();
        List<String> emailBodies = new List<String>();

        for (Integer i = 0; i < newWorkOrders.size(); i++) {
            WorkOrder__c newWorkOrder = newWorkOrders[i];
            WorkOrder__c oldWorkOrder = oldWorkOrders[i];

            if (newWorkOrder.Status__c == 'Resolved' && oldWorkOrder.Status__c != 'Resolved' && newWorkOrder.Email__c != null) {
                emailAddresses.add(newWorkOrder.Email__c);
                emailSubjects.add('Status Updated');
                emailBodies.add('Dear Customer, <br><br>Your work order (ID: ' + newWorkOrder.Id + ') has been marked as resolved. Thank you for your patience.');
            }
        }

        // Call the future method to send the emails asynchronously
        if (!emailAddresses.isEmpty()) {
            sendEmailInFuture(emailAddresses, emailSubjects, emailBodies);
        }
    }
}
